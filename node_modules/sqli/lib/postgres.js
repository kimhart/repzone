// Generated by CoffeeScript 1.3.3
(function() {
  var factory, replaceQMarks;

  factory = function(pg) {
    var sqli;
    sqli = require('./sqli');
    return sqli.register('postgres', {
      connect: function(connectionString, cb) {
        var client;
        client = new pg.Client(connectionString);
        return client.connect(function(err) {
          if (err) {
            return cb(err, null);
          }
          return cb(null, client);
        });
      },
      close: function(client) {
        return client.end();
      },
      execute: function(client, sql, params, rowCb, endCb, errCb) {
        var q;
        q = client.query(replaceQMarks(sql), params);
        return q.on('row', rowCb).on('end', endCb).on('error', errCb);
      },
      begin: function(isolation) {
        var id;
        id = 'READ COMMITTED';
        switch (isolation) {
          case sqli.READ_UNCOMMITTED:
            id = 'READ UNCOMMITTED';
            break;
          case sqli.REPEATABLE_READ:
            id = 'REPEATABLE READ';
            break;
          case sqli.SERIALIZABLE:
            id = 'SERIALIZABLE';
        }
        return 'START TRANSACTION ISOLATION LEVEL ' + id;
      },
      save: function(savepoint) {
        return 'SAVEPOINT ' + savepoint;
      },
      commit: function() {
        return 'COMMIT';
      },
      rollback: function(savepoint) {
        if (!savepoint) {
          return 'ROLLBACK';
        }
        return 'ROLLBACK TO SAVEPOINT ' + savepoint;
      }
    });
  };

  try {
    factory(require('pg'));
  } catch (error) {
    console.log("Could not load postgres wrapper:\n" + error.message);
  }

  /**
  * Replaces question marks in the sql string by postgres prepared statement
  * placeholders($1, $2...). Does minor parsing of the string in order to
  * ignore question marks inside quotes.
  *
  */


  replaceQMarks = function(sql) {
    var c, currentIndex, i, insideQuote, parameterIndex, rv, _i, _len;
    insideQuote = false;
    parameterIndex = 1;
    currentIndex = 0;
    rv = [];
    for (i = _i = 0, _len = sql.length; _i < _len; i = ++_i) {
      c = sql[i];
      if (insideQuote) {
        if (c === "'") {
          insideQuote = false;
        }
      } else {
        if (c === '?') {
          rv.push(sql.substring(currentIndex, i));
          rv.push('$' + parameterIndex);
          parameterIndex++;
          currentIndex = i + 1;
        } else if (c === "'") {
          insideQuote = true;
        }
      }
    }
    rv.push(sql.substring(currentIndex));
    return rv.join('');
  };

  exports.replaceQMarks = replaceQMarks;

}).call(this);
