{
  "_args": [
    [
      {
        "name": "sqli",
        "raw": "sqli",
        "rawSpec": "",
        "scope": null,
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Alexanderhubbard/Documents/projects/repzone"
    ]
  ],
  "_from": "sqli@latest",
  "_id": "sqli@0.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/sqli",
  "_npmUser": {
    "email": "tpadilha84@gmail.com",
    "name": "tarruda"
  },
  "_npmVersion": "1.1.62",
  "_phantomChildren": {},
  "_requested": {
    "name": "sqli",
    "raw": "sqli",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sqli/-/sqli-0.0.4.tgz",
  "_shasum": "69dfbc2096203f4d21796a7e82dbd214821401f2",
  "_shrinkwrap": null,
  "_spec": "sqli",
  "_where": "/Users/Alexanderhubbard/Documents/projects/repzone",
  "author": {
    "email": "tpadilha84@gmail.com",
    "name": "Thiago de Arruda"
  },
  "bugs": {
    "url": "https://github.com/tarruda/node-sqli/issues"
  },
  "dependencies": {
    "generic-pool": ">=1.0.9",
    "mysql": ">=2.0.0alpha3",
    "pg": ">=0.7.1",
    "sqlite3": ">=2.1.4"
  },
  "description": "Common interface for accessing SQL databases from node.js",
  "devDependencies": {
    "assert": ">=0.4.9",
    "coffee-script": ">=1.3.3",
    "mocha": ">=1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "69dfbc2096203f4d21796a7e82dbd214821401f2",
    "tarball": "https://registry.npmjs.org/sqli/-/sqli-0.0.4.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/tarruda/node-sqli#readme",
  "main": "./lib/sqli.js",
  "maintainers": [
    {
      "email": "tpadilha84@gmail.com",
      "name": "tarruda"
    }
  ],
  "name": "sqli",
  "optionalDependencies": {
    "mysql": ">=2.0.0alpha3",
    "pg": ">=0.7.1",
    "sqlite3": ">=2.1.4"
  },
  "readme": "# node-sqli\n\n  Library that attempts to provide a common interface for SQL databases by\n  wrapping third party drivers with a simple API. Inspired by python's\n  dbapi, java jdbc, etc. So far there's support for sqlite, mysql and postgres.\n  See the end of README for info on how to wrap other drivers.\n\n#### Instalation\n\n    $ npm install sqli\n\n#### Usage\n\n  Acquire a connection:\n\n```js\nvar sqli = require('sqli')\n, sqlite = sqli.getDriver('sqlite')\n, conn = sqlite.connect(':memory:');\n```\n\n  Connections can also be acquired via pools which are useful in web applications\n\n```js\n// max 5 connections, 10 seconds before idle connections will be closed\npool = sqlite.createPool('some.db', 5, 10000);\nconn = pool.get();\n```\n\n  The pool is implemented using https://github.com/coopernurse/node-pool.\n\n  The API methods always return promises/futures, which will queue statements/callbacks\n  to be executed when appropriate, creating the illusion of synchronous programming\n  style:\n\n```js\nconn.exec('CREATE TABLE tags (id TEXT, value TEXT)');\nconn.exec('INSERT INTO tags (id, value) VALUES (?, ?)', ['id1', 'value1']);\nconn.exec(\"INSERT INTO tags (id, value) VALUES ('id2', 'value2')\");\nconn.exec('SELECT * FROM tags').each(function(row) {\n  console.log(row);\n});\n```\n\n#### Transactions API\n\n```js\nconn.exec('INSERT INTO test (id,stringcol) VALUES(?,?)', [1, 'abc']);\nconn.exec('INSERT INTO test (id,stringcol) VALUES(?,?)', [2, 'def']);\nconn.begin(); // This will disable autocommit\nconn.exec('INSERT INTO test (id,stringcol) VALUES(?,?)', [3, 'ghi']);\nconn.exec('INSERT INTO test (id,stringcol) VALUES(?,?)', [4, 'jkl']);\nconn.commit(); // commits everything since 'begin'\nconn.exec('SELECT COUNT(*) FROM test').scalar(function(value) {\n  console.log(value); // 4\n});\n```\n\n  There's also limited support to isolation levels and savepoints:\n\n```js\nconn.exec('INSERT INTO test (id,stringcol) VALUES(?,?)', [1, 'abc']);\nconn.exec('INSERT INTO test (id,stringcol) VALUES(?,?)', [2, 'def']);\nconn.begin(sqli.SERIALIZABLE);\nconn.exec(\"UPDATE test SET stringcol = 'txt' WHERE id=2\");\nconn.save('s1');\nconn.exec('DELETE FROM test WHERE id = 1');\nconn.exec('SELECT stringcol AS s FROM test').all(function(rows) {\n  console.log(rows);\n});\nconn.rollback('s1'); // Revert everything since 'save'\nconn.exec('SELECT stringcol AS s FROM test').all(function(rows) {\n  console.log(rows);\n});\nconn.rollback(); // Revert everything done since 'begin'\nconn.exec('SELECT stringcol AS s FROM test ORDER BY id').first(function(row) {\n  console.log(row.s); // 'abc'\n});\n```\n\n  An error handler can be attached invoking 'then' on the result object:\n\n```js\nconn.exec('INSERT INTO t1 VALUES (?, ?)', [a1, a2]);\nconn.exec('INSERT INTO t2 VALUES (?, ?)', [a1, a2]);\nconn.exec('INSERT INTO t3 VALUES (?, ?)', [a1, a2]);\nconn.exec('INSERT INTO t4 VALUES (?, ?)', [a1, a2])\n.then(function(err) {\n  // This handler will be executed after all other statements.\n  // If an error ocurred during the execution of any statement,\n  // it will be referenced by the 'err' parameter\n  if (err) console.log(err);\n  else console.log('success');\n});\n``` \n\n  Errors can also be caught by attaching a handler to the connection object:\n\n```js\nconn.error(function(err) {\n  // handle the first connection error\n});\n```\n\n  After an error ocurrs, the connection will pause, and can be resumed like this:\n\n```js\nconn.exec('INSERT INTO t1 VALUES (1, 2)')\nconn.exec('INSERT INTO t2 VALUES (3, 4)')\n.then(function() {\n  console.log('success');\n})\nconn.error(function(err) {\n  // lets say an error ocurred in the first statement\n  if (err.code = 100) {\n    // ignore the error and continue from the second statement\n    conn.resume();\n  } else {\n    // unexpected error, clear the statement queue\n    conn.resume(true);\n    // the 'true' argument will clear queued statements\n    // so you can restart work or do something else\n  }\n})\n```\n\n  If inside a transaction, it is possible to rollback which will also clear\n  any pending statements:\n\n```js\nconn.begin();\nconn.exec('INSERT INTO t1 VALUES (1, 2)')\nconn.exec('INSERT INTO t2 VALUES (3, 4)')\nconn.error(function(err) {\n  conn.rollback();\n})\nconn.commit();\n```\n\n#### Implementing custom drivers:\n\n  Here is node-sqlite3 wrapper:\n\n```js\nfunction factory(sqlite3) {\n  var sqli = require('./sqli');\n  sqli.register('sqlite', {\n    connect: function(filename, cb) {\n      var db = new sqlite3.Database(filename, function(err) {\n        if (err) return cb(err, null);\n        cb(null, db);\n      });\n    },\n    close: function(db) {\n      db.close();\n    },\n    execute: function(db, sql, params, rowCb, endCb, errCb) {\n      db.each(sql, params, function(err, row) {\n        if (err) errCb(err);\n        else rowCb(row);\n      }, function(err, count) {\n        if (err) errCb(err);\n        else endCb();\n      });\n    },\n    begin: function(isolation) {\n      switch (isolation) {\n        case sqli.REPEATABLE_READ:\n          return 'BEGIN IMMEDIATE TRANSACTION';\n        case sqli.SERIALIZABLE:\n          return 'BEGIN EXCLUSIVE TRANSACTION';\n        default:\n          return 'BEGIN TRANSACTION';\n      }\n    },\n    save: function(savepoint) {\n      return 'SAVEPOINT ' + savepoint;\n    },\n    commit: function() {\n      return 'COMMIT';\n    },\n    rollback: function(savepoint) {\n      if (!savepoint)\n        return 'ROLLBACK';\n      return 'ROLLBACK TO ' + savepoint;\n    }\n  });\n};\n\ntry {\n  factory(require('sqlite3'));\n} catch (error) {\n  console.log('Could not load sqlite3 wrapper ' + error.message);\n}\n```\n\n  If you do implement more wrappers, please send me pull requests :).\n\n  There's a generic test suite(test/common.js) that can be used as a quick sanity check.\n\n## To run the tests(will only run the tests for the available database systems)\n\n    $ npm install -d\n    $ make test\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/tarruda/node-sqli.git"
  },
  "version": "0.0.4"
}
